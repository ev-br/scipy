"""Dispatchers for alternative backends in scipy.ndimage.

The signature of `func_dispatcher` must match the signature of ndimage.func.
The job of a `func_dispatcher` is to know which arguments of `ndimage.func`
are arrays.

* signatures are generated by

--------------
import inspect
from scipy import ndimage

names = [x for x in dir(ndimage) if not x.startswith('_')]
objs = [getattr(ndimage, name) for name in names]
funcs = [obj for obj in objs if inspect.isroutine(obj)]

for func in funcs:
    sig = inspect.signature(func)
    print(f"def {func.__name__}_dispatcher{sig}:\n\tpass\n\n")
---------------

* which arguments to dispatch: manually trawled the documentation for
  array-like and array arguments

"""
import numpy as np
from scipy._lib._array_api import array_namespace


# XXX: handling of optional arguments relies on that array_namespace() ignores
#      None arguments. No idea if it's deliberate or not. If not, make a wrapper here

def _skip_if_dtype(arg):
    """'array or dtype' polymorphism.

    Return None for np.int8, dtype('float32') or 'f' etc
           arg for np.empty(3) etc
    """

    if isinstance(arg, str):
        return None
    if type(arg) is type:
        return None if issubclass(arg, np.generic) else arg
    else:
        return None if isinstance(arg, np.dtype) else arg


def _skip_if_int(arg):
    return None if (arg is None or isinstance(arg, int)) else arg


def affine_transform_dispatcher(input, matrix, offset=0.0, output_shape=None, output=None, order=3, mode='constant', cval=0.0, prefilter=True):
    return array_namespace(input, matrix, _skip_if_dtype(output))


def binary_closing_dispatcher(input, structure=None, iterations=1, output=None, origin=0, mask=None, border_value=0, brute_force=False):
    return array_namespace(input, structure, _skip_if_dtype(output))

binary_opening_dispatcher = binary_closing_dispatcher


def binary_dilation_dispatcher(input, structure=None, iterations=1, mask=None, output=None, border_value=0, origin=0, brute_force=False):
    return array_namespace(input, structure, _skip_if_dtype(output), mask)

binary_erosion_dispatcher = binary_dilation_dispatcher


def binary_fill_holes_dispatcher(input, structure=None, output=None, origin=0):
    return array_namespace(input, structure, _skip_if_dtype(output))

label_dispatcher = binary_fill_holes_dispatcher


def binary_hit_or_miss_dispatcher(input, structure1=None, structure2=None, output=None, origin1=0, origin2=None):
    return array_namespace(input, structure1, structure2, _skip_if_dtype(output))


def binary_propagation_dispatcher(input, structure=None, mask=None, output=None, border_value=0, origin=0):
    return array_namespace(input, structure, mask, _skip_if_dtype(output))


def convolve_dispatcher(input, weights, output=None, mode='reflect', cval=0.0, origin=0):
    return array_namespace(input, weights, _skip_if_dtype(output))

correlate_dispatcher = convolve_dispatcher


def convolve1d_dispatcher(input, weights, axis=-1, output=None, mode='reflect', cval=0.0, origin=0):
    return array_namespace(input, weights, _skip_if_dtype(output))

correlate1d_dispatcher = convolve1d_dispatcher


def distance_transform_bf_dispatcher(input, metric='euclidean', sampling=None, return_distances=True, return_indices=False, distances=None, indices=None):
    return array_namespace(input, distances, indices)


def distance_transform_cdt_dispatcher(input, metric='chessboard', return_distances=True, return_indices=False, distances=None, indices=None):
    return array_namespace(input, distances, indices)


def distance_transform_edt_dispatcher(input, sampling=None, return_distances=True, return_indices=False, distances=None, indices=None):
    return array_namespace(input, distances, indices)


def find_objects_dispatcher(input, max_label=0):
    return array_namespace(input)


def fourier_ellipsoid_dispatcher(input, size, n=-1, axis=-1, output=None):
    return array_namespace(input, _skip_if_dtype(output))

fourier_uniform_dispatcher = fourier_ellipsoid_dispatcher


def fourier_gaussian_dispatcher(input, sigma, n=-1, axis=-1, output=None):
    return array_namespace(input, _skip_if_dtype(output))

def fourier_shift_dispatcher(input, shift, n=-1, axis=-1, output=None):
    return array_namespace(input, _skip_if_dtype(output))


def gaussian_filter_dispatcher(input, sigma, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0, *, radius=None, axes=None):
    return array_namespace(input, _skip_if_dtype(output))


def gaussian_filter1d_dispatcher(input, sigma, axis=-1, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0, *, radius=None):
    return array_namespace(input, _skip_if_dtype(output))


def gaussian_gradient_magnitude_dispatcher(input, sigma, output=None, mode='reflect', cval=0.0, **kwargs):
    return array_namespace(input, _skip_if_dtype(output))

gaussian_laplace_dispatcher = gaussian_gradient_magnitude_dispatcher


def generate_binary_structure_dispatcher(rank, connectivity):
    # XXX: no input arrays; always return numpy
    return np


def generic_filter_dispatcher(input, function, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0, extra_arguments=(), extra_keywords=None):
    # XXX: function LowLevelCallable w/backends
    return array_namespace(input, footprint, _skip_if_dtype(output))


def generic_filter1d_dispatcher(input, function, filter_size, axis=-1, output=None, mode='reflect', cval=0.0, origin=0, extra_arguments=(), extra_keywords=None):
    return array_namespace(input, _skip_if_dtype(output))


def generic_gradient_magnitude_dispatcher(input, derivative, output=None, mode='reflect', cval=0.0, extra_arguments=(), extra_keywords=None):
    # XXX: function LowLevelCallable w/backends
    return array_namespace(input, _skip_if_dtype(output))


def generic_laplace_dispatcher(input, derivative2, output=None, mode='reflect', cval=0.0, extra_arguments=(), extra_keywords=None):
    # XXX: function LowLevelCallable w/backends
    return array_namespace(input, _skip_if_dtype(output))


def geometric_transform_dispatcher(input, mapping, output_shape=None, output=None, order=3, mode='constant', cval=0.0, prefilter=True, extra_arguments=(), extra_keywords={}):
    return array_namespace(input, _skip_if_dtype(output))


def histogram_dispatcher(input, min, max, bins, labels=None, index=None):
    return array_namespace(input, labels)


def iterate_structure_dispatcher(structure, iterations, origin=None):
    return array_namespace(structure)


def labeled_comprehension_dispatcher(input, labels, index, func, out_dtype, default, pass_positions=False):
    return array_namespace(input, labels)


def laplace_dispatcher(input, output=None, mode='reflect', cval=0.0):
    return array_namespace(input, _skip_if_dtype(output))


def map_coordinates_dispatcher(input, coordinates, output=None, order=3, mode='constant', cval=0.0, prefilter=True):
    return array_namespace(input, coordinates, _skip_if_dtype(output))


def maximum_filter1d_dispatcher(input, size, axis=-1, output=None, mode='reflect', cval=0.0, origin=0):
    return array_namespace(input, _skip_if_dtype(output))

minimum_filter1d_dispatcher = maximum_filter1d_dispatcher
uniform_filter1d_dispatcher = maximum_filter1d_dispatcher


def maximum_dispatcher(input, labels=None, index=None):
    return array_namespace(input, labels, _skip_if_int(index))

minimum_dispatcher = maximum_dispatcher
median_dispatcher = maximum_dispatcher
mean_dispatcher = maximum_dispatcher
variance_dispatcher = maximum_dispatcher
standard_deviation_dispatcher = maximum_dispatcher
sum_labels_dispatcher = maximum_dispatcher
sum_dispatcher = maximum_dispatcher  # ndimage.sum is sum_labels

maximum_position_dispatcher = maximum_dispatcher
minimum_position_dispatcher = maximum_dispatcher

extrema_dispatcher = maximum_dispatcher
center_of_mass_dispatcher = extrema_dispatcher


def median_filter_dispatcher(input, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0, *, axes=None):
    return array_namespace(input, footprint, _skip_if_dtype(output))

minimum_filter_dispatcher = median_filter_dispatcher
maximum_filter_dispatcher = median_filter_dispatcher


def morphological_gradient_dispatcher(input, size=None, footprint=None, structure=None, output=None, *args, **kwds):
    return array_namespace(input, footprint, structure, _skip_if_dtype(output))

morphological_laplace_dispatcher = morphological_gradient_dispatcher
white_tophat_dispatcher = morphological_gradient_dispatcher
black_tophat_dispatcher = morphological_gradient_dispatcher
grey_closing_dispatcher = morphological_gradient_dispatcher
grey_dilation_dispatcher = morphological_gradient_dispatcher
grey_erosion_dispatcher = morphological_gradient_dispatcher
grey_opening_dispatcher = morphological_gradient_dispatcher


def percentile_filter_dispatcher(input, percentile, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0, *, axes=None):
    return array_namespace(input, footprint, _skip_if_dtype(output))


def prewitt_dispatcher(input, axis=-1, output=None, mode='reflect', cval=0.0):
    return array_namespace(input, _skip_if_dtype(output))

sobel_dispatcher = prewitt_dispatcher


def rank_filter_dispatcher(input, rank, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0, *, axes=None):
    return array_namespace(input, footprint, _skip_if_dtype(output))


def rotate_dispatcher(input, angle, axes=(1, 0), reshape=True, output=None, order=3, mode='constant', cval=0.0, prefilter=True):
    return array_namespace(input, _skip_if_dtype(output))


def shift_dispatcher(input, shift, output=None, order=3, mode='constant', cval=0.0, prefilter=True):
    return array_namespace(input, _skip_if_dtype(output))


def spline_filter_dispatcher(input, order=3, output=np.float64, mode='mirror'):
    return array_namespace(input, _skip_if_dtype(output))


def spline_filter1d_dispatcher(input, order=3, axis=-1, output=np.float64, mode='mirror'):
    return array_namespace(input, _skip_if_dtype(output))


def uniform_filter_dispatcher(input, size=3, output=None, mode='reflect', cval=0.0, origin=0, *, axes=None):
    return array_namespace(input, _skip_if_dtype(output))


def value_indices_dispatcher(arr, *, ignore_value=None):
    return array_namespace(arr)


def watershed_ift_dispatcher(input, markers, structure=None, output=None):
    return array_namespace(input, markers, structure, _skip_if_dtype(output))


def zoom_dispatcher(input, zoom, output=None, order=3, mode='constant', cval=0.0, prefilter=True, *, grid_mode=False):
    return array_namespace(input, _skip_if_dtype(output))

